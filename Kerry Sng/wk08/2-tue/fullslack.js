// var list = [1,2,3,4,5];
// Fullslack.shuffle(list);
// Returns a shuffled copy of the list
//
// Fullslack.map(list, callback);
// Produces a new array of values by mapping each value in list through a transformation function
//
// Fullslack.filter(list, callback);
// Looks through each value in the list, returning an array of all the values that pass a truth test


// Fisher-Yates shuffle - loop from back to front bypassing index[0], first pass of the
//loop will affect last element of the array.(i.e generate a random index and swap with last index for first loop)
//Next loop will start at second last element
Array.prototype.shuffle = function() {

  var i = this.length , j, temp;     //j=random number generated by loop each time loop passes

  while (--i > 0) {    //stops the loop getting to index[0]
    j = Math.floor(Math.random() * (i+1));
    temp = this[j]
    this[j] = this[i];   //takes the array at the random index and swap for index position at the loop
    this[i] = temp;
  }
  return this
};

var list = [1,2,3,4,5]
var result = list.shuffle();

function transform(num) {

  var num = list.map(Math.sqrt)

  return num
};

transform(num)
debugger
